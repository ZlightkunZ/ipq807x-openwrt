name: Build remote repo only if new commits were pushed
on:
  workflow_dispatch:
  push:
  schedule:
    - cron: '0 6 * * 2'
jobs:
  check:
    name: Check remote repo for new commits
    runs-on: ubuntu-latest
    steps:
      - name: Use GitHub API to poll commits
        run: |
          curl -sL "https://api.github.com/repos/$REMOTE_REPOSITORY/commits?sha=$REMOTE_BRANCH&per_page=1" | jq -r '[.[]][0]' > commit.json
        env:
          REMOTE_REPOSITORY: openwrt/openwrt
          REMOTE_BRANCH: master
      - name: Calculate hours since last commit
        id: calc
        run: |
          date="$(jq -r '.commit.committer.date' commit.json)"
          timestamp=$(date --utc -d "$date" +%s)
          hours=$(( ( $(date --utc +%s) - $timestamp ) / 3600 ))
          echo "Last commit date: $date"
          echo "Hours since last commit: $hours"
          echo "::{name}={commit_age}>> $GITHUB_OUTPUT::$hours"
    outputs:
      commit_age: ${{ steps.calc.outputs.commit_age }}
  build:
    name: Build the remote repository
    needs: check
    runs-on: ubuntu-latest
    if: ${{ needs.check.outputs.commit_age <= 168 || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Show inputs received from previous job
        env:
          COMMIT_AGE: ${{ needs.check.outputs.commit_age }}
        run: |
          echo "Build triggered with commits last pushed $COMMIT_AGE hours ago"
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: openwrt/openwrt
          ref: master
      - name: Update and install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Generate config for IPQ807x Generic
        run: |
          echo "CONFIG_TARGET_ipq807x=y\n" > .config
          echo "CONFIG_TARGET_ipq807x_generic=y\n" >> .config
          echo "CONFIG_TARGET_ipq807x_generic_DEVICE_xiaomi_ax3600=y\n" >> .config
          echo "CONFIG_TARGET_PER_DEVICE_ROOTFS=y\n" >> .config
          echo "CONFIG_TARGET_ROOTFS_INITRAMFS=y\n" >> .config
          echo "CONFIG_TARGET_INITRAMFS_COMPRESSION_ZSTD=y\n" >> .config
          echo "CONFIG_PACKAGE_luci=y\n" >> .config
          echo "CONFIG_PACKAGE_kmod-qca-nss-dp=y\n" >> .config
          echo "CONFIG_PACKAGE_qca-ssdk-shell=y\n" >> .config
          echo "CONFIG_PACKAGE_openvpn=y" >> .config
          echo "CONFIG_PACKAGE_wpad-wolfssl=y\n" >> .config
          echo "CONFIG_PACKAGE_kmod-tun=y\n" >> .config
          echo "CONFIG_PACKAGE_curl=y\n" >> .config
          echo "CONFIG_PACKAGE_jq=y\n" >> .config
          echo "CONFIG_PACKAGE_luci-app-openvpn=y\n" >> .config
          echo "CONFIG_PACKAGE_ddns-scripts=y\n" >> .config
          echo "CONFIG_PACKAGE_ddns-scripts-services=y\n" >> .config
          echo "CONFIG_PACKAGE_uhttpd-mod-ubus=y\n" >> .config
          echo "CONFIG_PACKAGE_luci-app-ddns=y\n" >> .config
          echo "CONFIG_PACKAGE_openvpn-wolfssl=y\n" >> .config
          echo "CONFIG_OPENVPN_igmpproxy=y\n" >> .config
          echo "CONFIG_OPENVPN_wolfssl=y\n" >> .config
          echo "CONFIG_PACKAGE_px5g-wolfssl=y\n" >> .config
          echo "CONFIG_OPENVPN_wolfssl_ENABLE_DEF_AUTH=y\n" >> .config
          echo "CONFIG_OPENVPN_wolfssl_ENABLE_FRAGMENT=y\n" >> .config
          echo "CONFIG_OPENVPN_wolfssl_ENABLE_LZ4=y\n" >> .config
          echo "CONFIG_OPENVPN_wolfssl_ENABLE_MULTIHOME=y\n" >> .config
          echo "CONFIG_OPENVPN_wolfssl_ENABLE_PF=y\n" >> .config
          echo "CONFIG_OPENVPN_wolfssl_ENABLE_PORT_SHARE=y\n" >> .config
          echo "CONFIG_OPENVPN_wolfssl_ENABLE_SMALL=y\n" >> .config
          echo "CONFIG_WOLFSSL_HAS_OPENVPN=y\n" >> .config
          echo "CONFIG_PACKAGE_kmod-wireguard=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-wireguard=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-wireguard=y" >> .config
          echo "CONFIG_PACKAGE_wireguard-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-sqm=y" >> .config
          echo "CONFIG_PACKAGE_iperf3=y" >> .config
          make defconfig
          cat .config
      - name: Download package sources
        run: make download V=s
      - name: Build tools
        run: |
          make tools/install -j$(nproc) V=s || \
          make tools/install V=s
      - name: Build toolchain
        run: |
          make toolchain/install -j$(nproc) V=s || \
          make toolchain/install V=s
      - name: Build target images
        run: |
          make -j$(nproc) V=s || \
          make V=s
      - name: TAR output
        run: tar -cvf ipq807xx-images.tar bin/targets/ipq807x/generic
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ipq807x-images
          path: ipq807xx-images.tar
  release:
    name: Upload artifacts as release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download the image artifacts
        uses: actions/download-artifact@v3
        with:
          name: ipq807x-images
      - name: Extract the image artifacts
        run: tar xf ipq807xx-images.tar
      - name: Get the current date
        run: echo "NOW=$(date +%F)" >> $GITHUB_ENV
      - name: Create a release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          prerelease: true
          title: "Updated prebuilt images ${{ env.NOW }}"
          automatic_release_tag: "AX3600-VPN"
          files: bin/targets/ipq807x/generic/*

